name: CI/CD Pipeline with Kind

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/order-service-image:latest

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Install Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-$(uname | tr '[:upper:]' '[:lower:]')-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Create Kind Cluster
      run: |
        kind create cluster --name ci-cluster

    - name: Build Docker Image
      run: |
        docker build . -t ${{ env.IMAGE }}

    - name: Load Docker Image to Kind
      run: |
        kind load docker-image ${{ env.IMAGE }} --name ci-cluster

    - name: Apply Kubernetes Manifests
      run: |
        kubectl apply -f kubernetes/k8s.yaml --context kind-ci-cluster

    - name: Check Deployment Status
      run: |
        kubectl rollout status deployment/web-app-deployment --context kind-ci-cluster

    - name: Run Tests
      run: |
        echo "Run your tests here"

    - name: Delete Kind Cluster
      if: always()
      run: |
        kind delete cluster --name ci-cluster

    - name: Build and Push Docker image to GCR
      run: |
        gcloud builds submit --tag $IMAGE

    - name: Set up Kubectl for GKE
      run: gcloud container clusters get-credentials ctse-autopilot-cluster-1 --zone asia-south2 --project ${{ env.PROJECT_ID }}

    - name: Deploy to GKE
      run: |
        kubectl apply -f kubernetes/k8s.yaml --validate=false
        kubectl rollout status deployment/web-app-deployment

    - name: Verify deployment in GKE
      run: kubectl get all
